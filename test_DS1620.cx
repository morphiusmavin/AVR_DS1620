
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <sys/time.h>

//#define BAUDRATE B9600
#define BAUDRATE B19200
//#define BAUDRATE B115200
#ifdef MAKE_TARGET
#define MODEMDEVICE "/dev/ttyAM1"
#warning "MAKE_TARGET defined......."
#else
#define MODEMDEVICE "/dev/ttyS0"
#endif
#define _POSIX_SOURCE 1 /* POSIX compliant source */
#define FALSE 0
#define TRUE 1
#define LEN 200
#define TIME_DELAY 2000

float convert_to_T_F(int raw_data);

//int f_or_c = 1;	// gets F degrees
int f_or_c = 0;	// get C degrees

int set_interface_attribs (int fd, int speed, int parity);
void set_blocking (int fd, int should_block);

//volatile int STOP=FALSE;

int set_interface_attribs (int fd, int speed, int parity)
{
        struct termios tty;
        memset (&tty, 0, sizeof tty);
        if (tcgetattr (fd, &tty) != 0)
        {
                printf ("error %d from tcgetattr", errno);
				perror(" ");
                return -1;
        }

        cfsetospeed (&tty, speed);
        cfsetispeed (&tty, speed);

        tty.c_cflag = (tty.c_cflag & ~CSIZE) | CS8;     // 8-bit chars
        // disable IGNBRK for mismatched speed tests; otherwise receive break
        // as \000 chars
        tty.c_iflag &= ~IGNBRK;         // disable break processing
        tty.c_lflag = 0;                // no signaling chars, no echo,
                                        // no canonical processing
        tty.c_oflag = 0;                // no remapping, no delays
        tty.c_cc[VMIN]  = 1;
        tty.c_cc[VTIME] = 20;

        tty.c_iflag &= ~(IXON | IXOFF | IXANY); // shut off xon/xoff ctrl

        tty.c_cflag |= (CLOCAL | CREAD);// ignore modem controls,
                                        // enable reading
        tty.c_cflag &= ~(PARENB | PARODD);      // shut off parity
        tty.c_cflag |= parity;
        tty.c_cflag &= ~CSTOPB;
        tty.c_cflag &= ~CRTSCTS;

        if (tcsetattr (fd, TCSANOW, &tty) != 0)
        {
                printf ("error %d from tcsetattr", errno);
				perror(" ");
                return -1;
        }
        return 0;
}

void set_blocking (int fd, int should_block)
{
        struct termios tty;
        memset (&tty, 0, sizeof tty);
        if (tcgetattr (fd, &tty) != 0)
        {
                printf ("error %d from tggetattr", errno);
                perror(" ");
                return;
        }

        tty.c_cc[VMIN]  = should_block ? 1 : 0;
        tty.c_cc[VTIME] = 50;            // 0.5 seconds read timeout

        if (tcsetattr (fd, TCSANOW, &tty) != 0)
                printf ("error %d setting term attributes", errno);
}


int main(void)
{
	int fd,c, res, res2;
	int i,j;
	int ret;
	unsigned char ch, ch2;
	struct termios oldtio,newtio;
	unsigned char buf[LEN];
	memset(&newtio, 0, sizeof newtio);
	unsigned char row, col;
	unsigned int temp, temp2;

	fd = open (MODEMDEVICE, O_RDWR | O_NOCTTY | O_SYNC);
	if (fd <0) {perror(MODEMDEVICE);
		exit(-1); }

#ifdef MAKE_TARGET
	printf("\nopened ttyAM1\n");
#else
	printf("\nopened ttyS0\n");
#endif

	if(tcgetattr(fd,&oldtio) != 0) /* save current port settings */
	{
		printf("Error from tcgetattr: %d ",errno);
		close(fd);
		exit(1);
	}

	set_interface_attribs (fd, BAUDRATE, 0);
	set_blocking (fd, 1);

	res2 = 0;
	ch = '*';
	j = 1;
	for(j = 0;j < 92;j++)
		printf("*");
	printf("\n");
	j = 0;
	printf("\n\nwaiting for chars...\n");
	for(i = 0;i < LEN;i++)
	{
		buf[i] = ch;
		if(++ch > 0x7e)
			ch = 0x21;
	}
//	for(i = 0;i < LEN;i++)
//		write(fd,&buf[i],1);
	i = 0;
	while(1)
	{
		read(fd,&ch,1);
		temp = (unsigned int)ch;
		temp <<= 8;
	//	printf("%02x ",temp);
		read(fd,&ch,1);
		temp2 = (unsigned int)ch;
	//	printf("%02x ",temp2);
		temp |= (unsigned int)temp2;
	//	printf("%02x %d\n",temp,temp);
//		printf("%02x ",temp);
		if(f_or_c == 1)
			printf("temp: %0.2f degrees F\n",(double)convert_to_T_F((int)temp));
		else
			printf("temp: %0.2f degrees C\n",(double)convert_to_T_F((int)temp));
		read(fd,&ch,1);
		if(ch != ch2)
		{
			ch2 = ch;
			if((ch & 0x10) == 0x10)
				printf("heat strip relay 1 on\n");
			if((ch & 0x20) == 0x20)
				printf("heat strip relay 2 on\n");
			if((ch & 0x40) == 0x40)
				printf("heat strip relay 3 on\n");
			if((ch & 0x01) == 0x01)
				printf("float charger relay 1 on\n");
			if((ch & 0x02) == 0x02)
				printf("float charger relay 2 on\n");
			if((ch & 0x04) == 0x04)
				printf("float charger relay 3 on\n");
			if((ch & 0x08) == 0x08)
				printf("float charger relay 4 on\n");
		}
		temp = 0;
	}
	ch = 0xff;
	write(fd,(void *)&ch,1);
	tcsetattr(fd,TCSANOW,&oldtio);
	close(fd);
	printf("\ndone\n");
	exit(0);
}

float convert_to_T_F(int raw_data)
{
	float T_F, T_celcius;
	if ((raw_data & 0x100) != 0)
	{
		raw_data = - (((~raw_data)+1) & 0xff); /* take 2's comp */   
	}
	T_celcius = raw_data * 0.5;
	if(f_or_c == 1)
	{
		T_F = (T_celcius * 1.8) + 32;
		return(T_F);	// returns 257 -> -67
	}
	else return(T_celcius);	// returns 125 -> -55
}


