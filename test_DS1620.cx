/*********************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <sys/time.h>
#include <time.h>

//#define BAUDRATE B9600
#define BAUDRATE B19200
//#define BAUDRATE B115200
#ifdef MAKE_TARGET
#define MODEMDEVICE "/dev/ttyAM1"
#warning "MAKE_TARGET defined......."
#else
#define MODEMDEVICE "/dev/ttyS0"
#endif
#define _POSIX_SOURCE 1 /* POSIX compliant source */
#define FALSE 0
#define TRUE 1
#define LEN 200
#define TIME_DELAY 2000
typedef unsigned char UCHAR;
typedef unsigned int UINT;
UCHAR f_or_c = 1;	// gets F degrees

float convert_to_T_F(int raw_data);
int write_file(char *filename,char *str);
int set_interface_attribs (int fd, int speed, int parity);
void set_blocking (int fd, int should_block);


/*********************************************************************************/
int set_interface_attribs (int fd, int speed, int parity)
{
        struct termios tty;
        memset (&tty, 0, sizeof tty);
        if (tcgetattr (fd, &tty) != 0)
        {
                printf ("error %d from tcgetattr", errno);
				perror(" ");
                return -1;
        }

        cfsetospeed (&tty, speed);
        cfsetispeed (&tty, speed);

        tty.c_cflag = (tty.c_cflag & ~CSIZE) | CS8;     // 8-bit chars
        // disable IGNBRK for mismatched speed tests; otherwise receive break
        // as \000 chars
        tty.c_iflag &= ~IGNBRK;         // disable break processing
        tty.c_lflag = 0;                // no signaling chars, no echo,
                                        // no canonical processing
        tty.c_oflag = 0;                // no remapping, no delays
        tty.c_cc[VMIN]  = 1;
        tty.c_cc[VTIME] = 20;

        tty.c_iflag &= ~(IXON | IXOFF | IXANY); // shut off xon/xoff ctrl

        tty.c_cflag |= (CLOCAL | CREAD);// ignore modem controls,
                                        // enable reading
        tty.c_cflag &= ~(PARENB | PARODD);      // shut off parity
        tty.c_cflag |= parity;
        tty.c_cflag &= ~CSTOPB;
        tty.c_cflag &= ~CRTSCTS;

        if (tcsetattr (fd, TCSANOW, &tty) != 0)
        {
                printf ("error %d from tcsetattr", errno);
				perror(" ");
                return -1;
        }
        return 0;
}

/*********************************************************************************/
void set_blocking (int fd, int should_block)
{
        struct termios tty;
        memset (&tty, 0, sizeof tty);
        if (tcgetattr (fd, &tty) != 0)
        {
                printf ("error %d from tggetattr", errno);
                perror(" ");
                return;
        }

        tty.c_cc[VMIN]  = should_block ? 1 : 0;
        tty.c_cc[VTIME] = 50;            // 0.5 seconds read timeout

        if (tcsetattr (fd, TCSANOW, &tty) != 0)
                printf ("error %d setting term attributes", errno);
}

/*********************************************************************************/
int main(int argc, char *argv[])
{
	int fd;
	int i;
	UCHAR ch; 
	char str[100];
	UCHAR buff[20];
	struct termios oldtio,newtio;
	memset(&newtio, 0, sizeof newtio);
	UINT temp, temp2;
	UCHAR param1, param2, param3, param4;
	char filename[20];
	float fres;
	int fp;
	char *fptr;
	time_t curtime2;
	struct timeval mtv;
	char time_buffer[40];
	UCHAR index;

	if(argc == 1)
		strcpy(filename,"logfile.txt\0");
	else strcpy(filename,argv[1]);
	printf("saving to: %s\n",filename);

	if(f_or_c == 0)
		printf("output is in C\n");
	else printf("output is in F\n");
	printf("%d\n",f_or_c);

	memset(str,0,sizeof(str));
	fptr = (char *)filename;
	fp = open((const char *)fptr, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);

	gettimeofday(&mtv, NULL);
	curtime2 = mtv.tv_sec;
	strftime((char*)&time_buffer[0],30,"%m-%d-%Y %T\n",localtime(&curtime2));
	write(fp,(const void*)time_buffer,strlen(time_buffer));
	close(fp);

	fd = open (MODEMDEVICE, O_RDWR | O_NOCTTY | O_SYNC);
	if (fd <0) {perror(MODEMDEVICE);
		exit(-1); }

	if(tcgetattr(fd,&oldtio) != 0) /* save current port settings */
	{
		printf("Error from tcgetattr: %d ",errno);
		close(fd);
		exit(1);
	}

	set_interface_attribs (fd, BAUDRATE, 0);
	set_blocking (fd, 1);

	printf("waiting for the DS1620's to send data...\n");

	i = 0;

	while(1)
	{
		gettimeofday(&mtv, NULL);
		curtime2 = mtv.tv_sec;
		strftime((char*)&time_buffer[0],30,"%m-%d-%Y %T ",localtime(&curtime2));
//		memcpy(time_buffer,time_buffer+10,7);
//		time_buffer[9] = 0;
//		strcat(time_buffer,": ");

		write_file(filename, time_buffer);
		strncpy(time_buffer,time_buffer+11,8);
		time_buffer[8] = 0;
		printf("%s ",time_buffer);
#if 0
		// read preamble of 0xFFFF0000
		do{
			read(fd,&ch,1);
			i++;
		}while(ch != 0xff);

//		printf("past 1st pre\n");
		i = 0;
		do{
			read(fd,&ch,1);
			i++;
		}while(ch != 0xff);

//		printf("past 2nd pre\n");
		i = 0;
		do{
			read(fd,&ch,1);
			i++;
		}while(ch != 0);

//		printf("past 3rd pre\n");
		i = 0;
		do{
			read(fd,&ch,1);
			i++;
		}while(ch != 0);
#endif
//		printf("past last preamble\n");

		do{
			read(fd,&ch,1);
		}while(ch != 0xFF);

		read(fd,&ch,1);
		temp = (UINT)ch;
		temp <<= 8;
	//	printf("%02x ",temp);
		read(fd,&ch,1);
		temp2 = (UINT)ch;
	//	printf("%02x ",temp2);
		temp |= (UINT)temp2;
	//	printf("%02x %d\n",temp,temp);
		if(temp != 0xFEFE)
		{
			fres =  convert_to_T_F((int)temp);

			if(fres != 0.0)
			{
				memset(str,0,sizeof(str));
				if(f_or_c == 1)
					sprintf(str,"1: %0.2fF ",(double)fres);
				else
					sprintf(str,"1: %0.2fC ",(double)fres);

				printf("%s",str);
				write_file(filename, str);
			}else printf("%02x ",temp);
		}

		read(fd,&ch,1);
		temp = (UINT)ch;
		temp <<= 8;
		read(fd,&ch,1);
		temp2 = (UINT)ch;
		temp |= (UINT)temp2;

		if(temp != 0xFEFE)
		{
			fres = convert_to_T_F((int)temp);
			if(fres != 0.0)
			{
				memset(str,0,sizeof(str));
				if(f_or_c == 1)
					sprintf(str, "2: %0.2fF ",(double)fres);
				else
					sprintf(str, "2: %0.2fC ",(double)fres);
				printf("%s",str);
				write_file(filename, str);
			}else printf("%02x ",temp);
		}

		read(fd,&ch,1);
		temp = (UINT)ch;
		temp <<= 8;
		read(fd,&ch,1);
		temp2 = (UINT)ch;
		temp |= (UINT)temp2;

		if(temp != 0xFEFE)
		{
			fres = convert_to_T_F((int)temp);
			if(fres != 0.0)
			{
				memset(str,0,sizeof(str));
				if(f_or_c == 1)
					sprintf(str, "3: %0.2fF ",(double)fres);
				else
					sprintf(str, "3: %0.2fC ",(double)fres);
				printf("%s",str);
				write_file(filename, str);
			}else printf("%02x ",temp);
		}

		read(fd,&ch,1);
		temp = (UINT)ch;
		temp <<= 8;
		read(fd,&ch,1);
		temp2 = (UINT)ch;
		temp |= (UINT)temp2;

		if(temp != 0xFEFE)
		{
			fres = convert_to_T_F((int)temp);
			if(fres != 0.0)
			{
				memset(str,0,sizeof(str));
				if(f_or_c == 1)
					sprintf(str, "4: %0.2fF \n",(double)fres);
				else
					sprintf(str, "4: %0.2fC \n",(double)fres);
				printf("%s",str);
				write_file(filename, str);
			}else 
			{
				printf("%02x\n",temp);
				strcpy(str,"\n");
				write_file(filename,str);
			}
		}else
		{
			printf("\n");
			strcpy(str,"\n");
			write_file(filename,str);
		}
		read(fd,&buff[0],8);		
		temp = 0;
	}

	close(fp);
	ch = 0xff;
	write(fd,(void *)&ch,1);
	tcsetattr(fd,TCSANOW,&oldtio);
	close(fd);
	printf("\ndone\n");
	exit(0);
}

/*********************************************************************************/
// 0x0001 -> 0x00FA is valid +F and 0x0193 -> 0x01ff is valid for -F readings

float convert_to_T_F(int raw_data)
	{
	float T_F, T_celcius;
	if ((raw_data & 0x100) != 0)
	{
		raw_data = - (((~raw_data)+1) & 0xff); /* take 2's comp */   
	}
	T_celcius = raw_data * 0.5;
	if(T_celcius > 125 || T_celcius < -54)
	{
		printf("OOR ");
		return 0;
	}
	if(f_or_c == 1)
	{
		T_F = (T_celcius * 1.8) + 32;
		return(T_F);	// returns 257 -> -67
	}
	else return(T_celcius);	// returns 125 -> -55
}

/*********************************************************************************/
int write_file(char *filename,char *str)
{
	char *fptr = (char *)filename;
	char errmsg[50];
	int fp;

	fp = open((const char *)fptr, O_RDWR | O_APPEND, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
//#else
//	fp = open((const char *)fptr, O_WRONLY | O_CREAT, 666);
//#endif
	if(fp < 0)
	{
		strcpy(errmsg,strerror(errno));
		close(fp);
		printf("%s  %s\n",errmsg,filename);
		return -2;
	}
	write(fp,(const void*)str,strlen(str));
	close(fp);
	return 0;
}


